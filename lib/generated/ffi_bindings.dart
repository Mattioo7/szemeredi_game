// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to SzemerediGameEngine
class SzemerediGameEngine {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SzemerediGameEngine(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SzemerediGameEngine.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int init() {
    return _init();
  }

  late final _initPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('init');
  late final _init = _initPtr.asFunction<int Function()>();

  int finish() {
    return _finish();
  }

  late final _finishPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('finish');
  late final _finish = _finishPtr.asFunction<int Function()>();

  int setup(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setup(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setup');
  late final _setup = _setupPtr.asFunction<int Function(int, int, int)>();

  int clean() {
    return _clean();
  }

  late final _cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clean');
  late final _clean = _cleanPtr.asFunction<int Function()>();

  void set_state(
    state arg0,
  ) {
    return _set_state(
      arg0,
    );
  }

  late final _set_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(state)>>('set_state');
  late final _set_state = _set_statePtr.asFunction<void Function(state)>();

  state get_state() {
    return _get_state();
  }

  late final _get_statePtr =
      _lookup<ffi.NativeFunction<state Function()>>('get_state');
  late final _get_state = _get_statePtr.asFunction<state Function()>();

  int move(
    int arg0,
  ) {
    return _move(
      arg0,
    );
  }

  late final _movePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('move');
  late final _move = _movePtr.asFunction<int Function(int)>();

  int check_who_won() {
    return _check_who_won();
  }

  late final _check_who_wonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('check_who_won');
  late final _check_who_won = _check_who_wonPtr.asFunction<int Function()>();

  int think() {
    return _think();
  }

  late final _thinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('think');
  late final _think = _thinkPtr.asFunction<int Function()>();

  void print_state() {
    return _print_state();
  }

  late final _print_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('print_state');
  late final _print_state = _print_statePtr.asFunction<void Function()>();

  void print_possible_moves() {
    return _print_possible_moves();
  }

  late final _print_possible_movesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('print_possible_moves');
  late final _print_possible_moves =
      _print_possible_movesPtr.asFunction<void Function()>();

  void make_random_move() {
    return _make_random_move();
  }

  late final _make_random_movePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('make_random_move');
  late final _make_random_move =
      _make_random_movePtr.asFunction<void Function()>();

  int api_init() {
    return _api_init();
  }

  late final _api_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_init');
  late final _api_init = _api_initPtr.asFunction<int Function()>();

  int api_finish() {
    return _api_finish();
  }

  late final _api_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_finish');
  late final _api_finish = _api_finishPtr.asFunction<int Function()>();

  int api_setup(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _api_setup(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _api_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'api_setup');
  late final _api_setup =
      _api_setupPtr.asFunction<int Function(int, int, int)>();

  int api_clean() {
    return _api_clean();
  }

  late final _api_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_clean');
  late final _api_clean = _api_cleanPtr.asFunction<int Function()>();

  void api_set_state(
    state arg0,
  ) {
    return _api_set_state(
      arg0,
    );
  }

  late final _api_set_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(state)>>('api_set_state');
  late final _api_set_state =
      _api_set_statePtr.asFunction<void Function(state)>();

  state api_get_state() {
    return _api_get_state();
  }

  late final _api_get_statePtr =
      _lookup<ffi.NativeFunction<state Function()>>('api_get_state');
  late final _api_get_state = _api_get_statePtr.asFunction<state Function()>();

  int api_move(
    int arg0,
  ) {
    return _api_move(
      arg0,
    );
  }

  late final _api_movePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('api_move');
  late final _api_move = _api_movePtr.asFunction<int Function(int)>();

  int api_check_who_won() {
    return _api_check_who_won();
  }

  late final _api_check_who_wonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_check_who_won');
  late final _api_check_who_won =
      _api_check_who_wonPtr.asFunction<int Function()>();

  int api_think() {
    return _api_think();
  }

  late final _api_thinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_think');
  late final _api_think = _api_thinkPtr.asFunction<int Function()>();
}

final class state extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<U64> set1;

  @ffi.Array.multi([4])
  external ffi.Array<U64> white;

  @ffi.Array.multi([4])
  external ffi.Array<U64> black;

  @ffi.Int()
  external int to_move;
}

typedef U64 = ffi.UnsignedLongLong;
typedef DartU64 = int;

final class settings extends ffi.Struct {
  @ffi.Int()
  external int k;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int m;
}

const int MEM_SIZE = 4;

const int MAX_NUMBER = 256;

const int BLACK = 0;

const int WHITE = 1;

const int DRAW = 2;

const int PLAY = 3;
