// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to SzemerediGameEngine
class SzemerediGameEngine {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SzemerediGameEngine(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SzemerediGameEngine.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int api_init() {
    return _api_init();
  }

  late final _api_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_init');
  late final _api_init = _api_initPtr.asFunction<int Function()>();

  int api_finish() {
    return _api_finish();
  }

  late final _api_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_finish');
  late final _api_finish = _api_finishPtr.asFunction<int Function()>();

  int api_setup(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _api_setup(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _api_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'api_setup');
  late final _api_setup =
      _api_setupPtr.asFunction<int Function(int, int, int)>();

  int api_clean() {
    return _api_clean();
  }

  late final _api_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_clean');
  late final _api_clean = _api_cleanPtr.asFunction<int Function()>();

  void api_set_state(
    ApiState arg0,
  ) {
    return _api_set_state(
      arg0,
    );
  }

  late final _api_set_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ApiState)>>('api_set_state');
  late final _api_set_state =
      _api_set_statePtr.asFunction<void Function(ApiState)>();

  ApiState api_get_state() {
    return _api_get_state();
  }

  late final _api_get_statePtr =
      _lookup<ffi.NativeFunction<ApiState Function()>>('api_get_state');
  late final _api_get_state =
      _api_get_statePtr.asFunction<ApiState Function()>();

  int api_move(
    int arg0,
  ) {
    return _api_move(
      arg0,
    );
  }

  late final _api_movePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('api_move');
  late final _api_move = _api_movePtr.asFunction<int Function(int)>();

  int api_check_who_won() {
    return _api_check_who_won();
  }

  late final _api_check_who_wonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_check_who_won');
  late final _api_check_who_won =
      _api_check_who_wonPtr.asFunction<int Function()>();

  int api_think() {
    return _api_think();
  }

  late final _api_thinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('api_think');
  late final _api_think = _api_thinkPtr.asFunction<int Function()>();
}

final class ApiState_t extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int set1;

  @ffi.UnsignedLongLong()
  external int white;

  @ffi.UnsignedLongLong()
  external int black;

  @ffi.Int()
  external int to_move;
}

typedef ApiState = ApiState_t;
